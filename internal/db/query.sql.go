// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const lisrPtoductsFromCategoryId = `-- name: LisrPtoductsFromCategoryId :many
SELECT id, name, price, category_id FROM produtos WHERE category_id = ?
`

func (q *Queries) LisrPtoductsFromCategoryId(ctx context.Context, categoryID sql.NullInt32) ([]Produto, error) {
	rows, err := q.db.QueryContext(ctx, lisrPtoductsFromCategoryId, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Produto
	for rows.Next() {
		var i Produto
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategories = `-- name: ListCategories :many
SELECT id, name FROM categories
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
